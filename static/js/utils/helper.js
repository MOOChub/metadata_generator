import {all_selected} from "./temporary_storage.js";
import {show_all_selected} from "../ui/ui_handler_selected.js";

export const sep = "--"; // a separator for ids in HTML elements if they are
//generated by iterations


/**
 * This function is used for sorting entries by name.
 *
 * @param entry1{Entry} - First entry for sorting.
 * @param entry2{Entry} - Second entry for sorting.
 * @returns {number} - A number representing the position of the two
 * entries relatively to each other.
 */
export function compare_entries_by_name(entry1, entry2){
    const name1 = entry1.name.toUpperCase();
    const name2 = entry2.name.toUpperCase();

    if(name1 < name2){
        return -1;
    }
    if(name1 > name2){
        return 1;
    }
    return 0;
}


/**
 * Adds or removes an entry from the all_selected variable depending on the check status of the corresponding
 * checkbox.
 *
 * @param entry{Entry} - The Entry object to be added or removed.
 * @param cbox{HTMLElement} - check box to control if it is checked or not.
 */
export function select_or_remove_entry(entry, cbox){
    entry.setChecked(cbox.checked);
    if(entry.checked){
        select_entry(entry);
    } else {
        remove_entry(entry);
    }

    show_all_selected();
}


/**
 * Pushes an Entry to the all_selected variable to store it. If it is the first Entry for a specific
 * framework, the framework is added to the keys.
 *
 * @param entry{Entry} - The Entry object to be added to the selected entries.
 */
function select_entry(entry){
    if(!all_selected.get(entry.framework)){ // If the framework/key does not exist, it is added.
        all_selected.set(entry.framework, []);
    }

    all_selected.get(entry.framework).push(entry);
}


/**
 * Removes a specified Entry from the all_selected variable. If it is the last Entry of the respective framework
 * the key for the framework is removed from the Map.
 *
 * @param entry{Entry} - The Entry object to be removed from the selected entries.
 */
function remove_entry(entry){
    all_selected.get(entry.framework).forEach(e => {
        if (e.name === entry.name){
            entry = e;
        }
    });

    const index_to_remove = all_selected.get(entry.framework).indexOf(entry);
    all_selected.get(entry.framework).splice(index_to_remove, 1);

    if(all_selected.get(entry.framework).length === 0){ // otherwise the name of the framework does not disappear in the selected entries section upon deselecting the last remaining entry of that framework
        all_selected.delete(entry.framework);
    }
}


/**
 * Removes all entries from the all_selected variable.
 */
export function clear_all_entries(){
    [...all_selected.keys()].forEach(framework => {
        all_selected.delete(framework);
    });
}